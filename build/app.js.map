{"version":3,"sources":["../src/app.js"],"names":["express","require","path","favicon","morgan","winston","cookieParser","bodyParser","routes","fantasyPl","app","env","process","NODE_ENV","locals","ENV","ENV_DEVELOPMENT","use","static","join","__dirname","set","stream","json","urlencoded","extended","req","res","next","err","Error","status","get","error","message","originalUrl","method","ip","render","title","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["const express = require(\"express\");\nconst path = require(\"path\");\nconst favicon = require(\"serve-favicon\"); //    eslint-disable-line no-unused-vars\nconst morgan = require(\"morgan\");\nconst winston = require(\"./config/winston\");\nconst cookieParser = require(\"cookie-parser\");\nconst bodyParser = require(\"body-parser\");\n\nconst routes = require(\"./routes/index\");\nconst fantasyPl = require(\"./routes/fantasyPl\");\n\nconst app = express();\n\nconst env = process.env.NODE_ENV || \"development\";\napp.locals.ENV = env;\napp.locals.ENV_DEVELOPMENT = env == \"development\"; // eslint-disable-line eqeqeq\n\napp.use(express.static(path.join(__dirname, \"./../frontend/build/\")));\n\n// view engine setup\n\napp.set(\"views\", path.join(__dirname, \"../src/views\"));\napp.set(\"view engine\", \"jade\");\n\n// app.use(favicon(__dirname + '/public/img/favicon.ico'));\napp.use(morgan(\"combined\", { stream: winston.stream }));\napp.use(bodyParser.json());\napp.use(\n  bodyParser.urlencoded({\n    extended: true\n  })\n);\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.use(\"/\", routes);\napp.use(\"/fantasy\", fantasyPl);\n\n// / catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error(\"Not Found\");\n  err.status = 404;\n  next(err);\n});\n\n// / error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get(\"env\") === \"development\") {\n  app.use((err, req, res, next) => {\n    //  eslint-disable-line no-unused-vars\n    winston.error(\n      `${err.status || 500} - ${err.message} - ${req.originalUrl} - ${\n        req.method\n      } - ${req.ip}`\n    );\n    res.status(err.status || 500);\n    res.render(\"error\", {\n      message: err.message,\n      error: err,\n      title: \"error\"\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use((err, req, res, next) => {\n  //   eslint-disable-line no-unused-vars\n\n  winston.error(\n    `${err.status || 500} - ${err.message} - ${req.originalUrl} - ${\n      req.method\n    } - ${req.ip}`\n  );\n  res.status(err.status || 500);\n  res.render(\"error\", {\n    message: err.message,\n    error: {},\n    title: \"error\"\n  });\n});\n\nmodule.exports = app;\n"]}