{"version":3,"sources":["../../src/routes/index.js"],"names":["express","require","axios","constants","default","altomfotballScraper","router","Router","get","req","res","render","title","params","tournamentId","seasonId","url","TABLE_URL","START_LIMIT","MAX_LIMIT","then","json","data","catch","error","errorMessage","err","MATCHES_URL","ROUNDS_URL","roundId","SPECIFIC_ROUND_URL","teamId","PLAYERS_URL","getYellowCards","players","getTopScorers","getAllDangerzonePlayers","post","body","max","sportId","filterImportant","getAllLeagues","status","console","log","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const express = require(\"express\");\n\nconst axios = require(\"axios\");\n\nconst constants = require(\"../constants/constants.js\").default;\n\nconst altomfotballScraper = require(\"../services/altomfotballScraper\").default;\n\nconst router = express.Router();\n\n/* GET home page. */\nrouter.get(\"/\", (req, res) => {\n  res.render(\"index\", { title: \"Express\" });\n});\n\n// router.get(\"/*\", (req, res) => {\n// \tres.sendFile(path.join(__dirname), \"build/index.html\", err => {\n// \t\tif (err) {\n// \t\t\tres.status(500).send(err);\n// \t\t}\n// \t});\n// });\n\n/**\n * @api {get} /table/:tournamentId/:seasonId Get table for a given tournament and season\n * @apiName GetTable\n * @apiGroup Tables\n *\n * @apiParam {Number} tournamentId (e.g 230 for Premier League)\n * @apiParam {Number} seasonId (e.g 339 for Premier League in the season of 17/18)\n */\nrouter.get(\"/table/:tournamentId/:seasonId\", (req, res) => {\n  const { tournamentId, seasonId } = req.params;\n  const url = `${constants.TABLE_URL}?start=${constants.START_LIMIT}&max=${\n    constants.MAX_LIMIT\n  }&tournamentId=${tournamentId}&seasonId=${seasonId}`;\n  axios\n    .get(url)\n    .then(data => {\n      res.json(data.data);\n    })\n    .catch(err => {\n      res.json({\n        error: `Could not get table for url: ${url}`,\n        errorMessage: err\n      });\n    });\n});\n\n/**\n * @api {get} /matches/:tournamentId/:seasonId Get matches for a given tournament and season\n * @apiName GetMatches\n * @apiGroup Matches\n *\n * @apiParam {Number} tournamentId (e.g 230 for Premier League)\n * @apiParam {Number} seasonId (e.g 339 for Premier League in the season of 17/18)\n */\nrouter.get(\"/matches/:tournamentId/:seasonId\", (req, res) => {\n  const { tournamentId, seasonId } = req.params;\n  const url = `${constants.MATCHES_URL}?start=${constants.START_LIMIT}&max=${\n    constants.MAX_LIMIT\n  }&tournamentId=${tournamentId}&seasonId=${seasonId}`;\n  axios\n    .get(url)\n    .then(data => {\n      res.json(data.data);\n    })\n    .catch(err => {\n      res.json({\n        error: `Could not get matches for ${url}`,\n        errorMessage: err\n      });\n    });\n});\n\n/**\n * @api {get} /rounds/:tournamentId/:seasonId/ Get all rounds for a given tournament and season\n * @apiName GetRounds\n * @apiGroup Matches\n *\n * @apiParam {Number} tournamentId (e.g 230 for Premier League)\n * @apiParam {Number} seasonId (e.g 339 for Premier League in the season of 17/18)\n */\nrouter.get(\"/rounds/:tournamentId/:seasonId\", (req, res) => {\n  const { tournamentId, seasonId } = req.params;\n  const url = `${constants.ROUNDS_URL}?start=${constants.START_LIMIT}&max=${\n    constants.MAX_LIMIT\n  }&tournamentId=${tournamentId}&seasonId=${seasonId}`;\n  axios\n    .get(url)\n    .then(data => {\n      res.json(data.data);\n    })\n    .catch(err => {\n      res.json({\n        error: `Could not get rounds for ${url}`,\n        errorMessage: err\n      });\n    });\n});\n\n/**\n * @api {get} /rounds/:roundId Get all rounds for a given id\n * @apiName GetRoundsPerRoundId\n * @apiGroup Matches\n *\n * @apiParam {Number} roundId\n */\nrouter.get(\"/rounds/:roundId\", (req, res) => {\n  const { roundId } = req.params;\n  const url = `${constants.SPECIFIC_ROUND_URL(roundId)}?start=${\n    constants.START_LIMIT\n  }&max=${constants.MAX_LIMIT}`;\n  axios\n    .get(url)\n    .then(data => res.json(data.data))\n    .catch(err => {\n      res.json({\n        error: `Could not get rounds for ${url}`,\n        errorMessage: err\n      });\n    });\n});\n\n/**\n * @api {get} /players/:tournamentId/:seasonId/:teamId Get all player for a team\n * @apiName GetPlayers\n * @apiGroup Players\n *\n * @apiParam {Number} tournamentId (e.g 230 for Premier League)\n * @apiParam {Number} seasonId (e.g 339 for Premier League in the season of 17/18)\n * @apiParam {Number} teamId (e.g 740 for Tottenham)\n */\nrouter.get(\"/players/:tournamentId/:seasonId/:teamId\", (req, res) => {\n  const { tournamentId, seasonId, teamId } = req.params;\n  const url = `${\n    constants.PLAYERS_URL\n  }?tournamentId=${tournamentId}&seasonId=${seasonId}&teamId=${teamId}&start=${\n    constants.START_LIMIT\n  }&max=${constants.MAX_LIMIT}`;\n  axios\n    .get(url)\n    .then(data => {\n      res.json(data.data);\n    })\n    .catch(err => {\n      res.json({\n        error: `Could not get players for url ${url}`,\n        errorMessage: err\n      });\n    });\n});\n\n/**\n * @api {get} /statistics/yellowcards/:tournamentId/ Get all yellow cards for a tournament\n * @apiName GetYellowCards\n * @apiGroup Statistics\n *\n * @apiParam {Number} tournamentId (e.g 230 for Premier League)\n */\nrouter.get(\n  \"/statistics/yellowcards/:tournamentId\",\n  altomfotballScraper.getYellowCards,\n  (req, res) => {\n    // console.log(res.players);\n    res.json({ data: res.players });\n  }\n);\n\n/**\n * @api {get} /statistics/topscorers/:tournamentId/ Get topscorers a tournament\n * @apiName GetTopscorers\n * @apiGroup Statistics\n *\n * @apiParam {Number} tournamentId (e.g 230 for Premier League)\n */\nrouter.get(\n  \"/statistics/topscorers/:tournamentId\",\n  altomfotballScraper.getTopScorers,\n  (req, res) => {\n    res.json({ data: res.players });\n  }\n);\n\nrouter.get(\n  \"/statistics/allDangerzonePlayers\",\n  altomfotballScraper.getAllDangerzonePlayers,\n  (req, res) => {\n    res.json(res.players);\n  }\n);\n\nrouter.post(\"/leagues/all\", (req, res) => {\n  const { max, sportId, filterImportant } = req.body;\n  altomfotballScraper\n    .getAllLeagues(max, sportId, filterImportant)\n    .then(data => {\n      res.status(200).json(data.data);\n    })\n    .catch(err => {\n      console.log(err);\n      res.status(404).json({ error: \"Could not get leagues\" });\n    });\n});\n\nmodule.exports = router;\n"]}